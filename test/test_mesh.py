import numpy as np
import pandas as pd
from fibermat import Mat, Net, Mesh


def equal(df1, df2):
    """
    Test the equality between two DataFrames.

    Parameters
    ----------
    df1 : pandas.DataFrame
        First DataFrame.
    df2 : pandas.DataFrame
        Second DataFrame.

    """
    assert np.allclose(df1.values, df2.values)
    assert np.all(df1.index == df2.index)
    assert np.all(df1.columns == df2.columns)
    assert np.all(df1.dtypes == df2.dtypes)
    assert np.all(df1.attrs == df2.attrs)


################################################################################
# Tests
################################################################################

def test_emptyMesh():
    """
    Test the initialization of an empty `Mesh` object.

    """
    # Optional
    mesh = pd.DataFrame(data=[], index=[], columns=["fiber", "s", "x", "y", "z", "beam", "constraint"], dtype=float)
    mesh[["fiber", "beam", "constraint"]] = mesh[["fiber", "beam", "constraint"]].astype(int)
    mesh.attrs = dict(n=0, size=50., periodic=True)
    equal(Mesh(), mesh)

    assert Mesh().check()
    assert Mesh(None).check()
    assert Mesh(mesh).check()


def test_Mesh():
    """
    Test the initialization of a `Mesh` object.

    """
    # Optional
    data = np.array([
        [0., -12.5       ,  -6.7929597 ,  23.01180748, -19.08627871,  1.,  0.],
        [0.,  -8.06427839,  -3.51633299,  20.02193397, -19.08627871,  2., 12.],
        [0.,  -8.03317106,  -3.49335429,  20.00096624, -19.08627871,  3., 36.],
        [0.,  -7.77355184,  -3.30157597,  19.82597135, -19.08627871,  4., 21.],
        [0.,  12.5       ,  11.67431009,   6.16069633, -19.08627871,  0.,  4.],
        [1., -12.5       ,   2.61850841,  -8.04075725, -17.83233563,  6.,  5.],
        [1.,   1.38749949,  11.66311454,   2.49763646, -17.83233563,  7.,  9.],
        [1.,  12.5       ,  18.90042823,  10.93024923, -17.83233563,  5.,  7.],
        [2., -12.5       ,  -7.24341109,   5.11875928,  -4.266903  ,  9.,  8.],
        [2.,   6.58735173,  11.66311454,   2.49763646,  -4.266903  , 10.,  6.],
        [2.,  12.5       ,  17.51974869,   1.68569683,  -4.266903  ,  8., 10.],
        [3., -12.5       ,  -9.9680682 ,  18.61309175,  -1.92603189, 12., 11.],
        [3.,  -5.89623413,  -3.51633299,  20.02193397,  -1.92603189, 13.,  1.],
        [3.,  -5.81002817,  -3.43211164,  20.04032508,  -1.92603189, 14., 37.],
        [3.,  -5.69092012,  -3.31574568,  20.06573549,  -1.92603189, 15., 20.],
        [3.,  12.5       ,  14.4563865 ,  23.94657208,  -1.92603189, 11., 15.],
        [4., -12.5       ,  -4.55470532,  -8.96996907,   1.09241609, 17., 16.],
        [4.,   2.7422018 ,  -3.65548213, -24.18562263,   1.09241609, 18., 27.],
        [4.,   3.42731873,  -3.61506323, -24.86954626,   1.09241609, 19., 24.],
        [4.,   8.45322302,  -3.31855687, -29.88669664,   1.09241609, 20., 38.],
        [4.,   8.50087389,  -3.31574568, -29.93426451,   1.09241609, 21., 14.],
        [4.,   8.74105637,  -3.30157597, -30.17402865,   1.09241609, 22.,  3.],
        [4.,  12.5       ,  -3.07981474, -33.92642511,   1.09241609, 16., 22.],
        [5., -12.5       ,  -4.36136122, -25.15863247,   6.99605107, 24., 23.],
        [5., -11.69966786,  -3.61506323, -24.86954626,   6.99605107, 25., 18.],
        [5.,  12.5       ,  18.95077253, -16.12843756,   6.99605107, 23., 25.],
        [6., -12.5       , -14.85351661, -28.30064519,  14.02645881, 27., 26.],
        [6.,  -0.56981195,  -3.65548213, -24.18562263,  14.02645881, 28., 17.],
        [6.,  12.5       ,   8.61223773, -19.67751506,  14.02645881, 26., 28.],
        [7., -12.5       ,   7.92266098,  12.14159373,  14.95792821, 30., 29.],
        [7.,   4.69521175,  23.97059315,  18.31728642,  14.95792821, 31., 33.],
        [7.,  12.5       ,  31.2546391 ,  21.12039082,  14.95792821, 29., 31.],
        [8., -12.5       ,  20.98561024,   1.60251871,  22.23344585, 33., 32.],
        [8.,   4.4792103 ,  23.97059315,  18.31728642,  22.23344585, 34., 30.],
        [8.,  12.5       ,  25.38066581,  26.21315638,  22.23344585, 32., 34.],
        [9., -12.5       , -16.34354827,  11.74252725,  23.93091711, 36., 35.],
        [9.,   2.77512029,  -3.49335429,  20.00096624,  23.93091711, 37.,  2.],
        [9.,   2.84791988,  -3.43211164,  20.04032508,  23.93091711, 38., 13.],
        [9.,   2.98290327,  -3.31855687,  20.11330336,  23.93091711, 39., 19.],
        [9.,  12.5       ,   4.68770015,  25.25868758,  23.93091711, 35., 39.]
    ])
    index = np.arange(40)

    mesh = pd.DataFrame(data=data, index=index, columns=["fiber", "s", "x", "y", "z", "beam", "constraint"])
    mesh[["fiber", "beam", "constraint"]] = mesh[["fiber", "beam", "constraint"]].astype(int)
    mesh.attrs = dict(n=10, size=50., periodic=True)
    equal(Mesh(Net(Mat(10))), mesh)

    assert Mesh(mesh).check()


################################################################################
# Main
################################################################################

if __name__ == '__main__':

    # Empy mesh
    test_emptyMesh()

    # Mat initialization
    test_Mesh()
